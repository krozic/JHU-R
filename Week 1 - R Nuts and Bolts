Basics
  5 Basic Atomic Classes
    Character
    Numeric (Real number)
    Integer
    Complex
    Logical

  Vectors
    The most basic object
    Only contains objects of the same class
    The "list" breaks this rule and can contain different classes

Vectors and Matrices
  x <- c() #concatinate function
  x <- vector("type", length = ) #initialize a vector

  When using different objects in the same list, coercion occurs
  which chooses the lowest common denominator.
  Boolean>Numeric>Character

  as.class(variable) #converts the class of the variable to the class called

  x <- list() #can combine multiple classes

  Matrices are constructed column wise

  m <- matrix(1:6, nrow = 2, ncol = 3)

  m <= 1:10
  dim(m) <- c(2, 5)

  cbind() and rbind()
  x <- 1:3
  y <- 10:12
  cbind(x, y)
  rbind(x, y)

Factors
  Integer vector where the integer has a label
  Male and Female vs 1 and 2
  Treated specially by lm() and glm()

  Ex.
    x<- factor(c("yes", "yes", "no", "yes", "no"))
      Levels: no yes
    table(x)
      x
      no yes
      2  3
    unclass(x)
      [1] 2 2 1 2 1
      attr(,"levels")
      [1] "no"  "yes"

    x <= factor (c("yes", "yes", "no", "yes", "no"), levels = c ("yes", "no"))

Missing Values
  Denoted as NA or NaN (NaN is an NA)
  is.na() and is.nan() test for NA or NaN

Data Frames
  A special type of list
    Every element has the same length
    each is a column, the length is the # of rows
    each row has a name
    Different classes in each column
  Special attribute called row.names
  Created by read.table() or read.csv() or data.frame()
  Converts to a matrix with data.matrix()
    This converts all the data to be the same
  Ex.
      x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
          foo   bar
        1   1   True
        2   2   True
        3   3   False
        4   4   False

Names Attribute
  Give objects names to make things self describing
  Ex.
    x <- 1:3
    names(x)
      NULL
    names(x) <- c("foo", "bar", "norf")
    names(x)
      "foo" "bar" "norf"

    x <- list(a = 1, b = 2, c = 3)
      already named

    m <- matrix(1:4, nrow = 2, ncol = 2)
    dimnames(m) <- list(c("a", "b"), c("c", "d"))
      This names the rows a and b, columns c and d

Reading Data
  read.table, read.csv - reads tabular data (read help("read.table"))
  readLines - reads lines of a text file
  source - reads R code files (inverse of dump)
  dget - reads R code files (inverse of dput)
  load - reads saved workspaces
  unserialize - reads single R objects in binary form

  Writing commands - write.table, writeLines, dump, dput, save, serialize

  read.table arguments
    file - name of the file or a connection
    header - logical, indicating if file has a header line
    sep - string, indicating how the columns are separated
    colClasses - character vector, same length as # columns, class of each column
    nrows - # of rows
    comment.char - string, indicates the comment character
    skip - # of lines to skip at the beginning
    stringAsFactors - defaults as True - do you want to encode character variables as factors?

    Ex.
      data <- read.table("foo.txt")
      colnames(data)
      rownames(data)
      dimnames(data)
      colnames(data) <- values
      nrow(data)
      ncol(data)

      Extracting parts of a table:
        head(data, 2) #first 2 rows of table, including headers
        data2 <- read.csv("file.csv", nrows = 2) #does the same from the file

      Many property call functions can take an input to change the property of the object

    read.csv uses default separator as comma

Reading Large Tables
  Set comment.char = "" if there are no comments
  Make a rough calculation of the memory required to store your dataset
    1,500,000 rows and 120 columns numerical data
    1500000 x 120 x 8 bytes/numeric
    = 1440000000 bytes
    = 1440000000 / 2^20 bytes/MB
    = 1373.29 MB
    = 1.34 GB

  Text formats
    dumping and dputing - resulting textual format is editable (if corrupted, possibly recoverable)
      Both preserve the metadata (bad readability)
      Work better with version control
      Adhere to "Unix philosophy"
      Downside: Not very space efficient

  dput-ting R Objects
    Writes R code which can be used to reconstruct an R object
    Can only be used on a single object
    Ex.
      y <- data.frame(a = 1, b = "a")
      dput(y)
        structure(list(a = 1,
                      b = structure(1L, .Label = "a",
                                    class = "factor")),
                  .Names = c("a", "b"), row.names = c(NA, -1L),
                  class = "data.frame")
        dput(y, file = "y.R")
        new.y <- dget("y.R")
        new.y
          a b
        1 1 a

  Dumping R Objects
      Can be used on multiple objects
      Ex.
        x <- "foo"
        y <- data.frame(a = 1, b = "a")
        dump(c("x", "y"), file = "data.R")
        rm(x, y)
        source("data.R")
        y
          a b
        1 1 a
        x
        [1] "foo"

Connections: Interfaces to the outside world
  Ways to read data beyond read.table or read.csv
  file - opens a connection to a file
    description - name of file
    open - "r" read only, "w" writing (init. new file), "a" appending
          "rb", "wb", "ab" reading, writing, or appending in binary mode (Windows)
  gzfile - opens a connection to a file compressed with gzip
  bzfile - opens a connection to a file compressed with bzip2
  url - opens a connection to a webpage

  Ex. only read part of a file
    con <- gzfile("words.gz")
    x <- readLines(con, 10) #only reads first 10 lines
  writeLines can be used similarily

  Ex. read part of a webpage
    con <- url("http://www.jhsph.edu", "r")
    x <- readLines(con)
    head(x)

Subsetting
  Basics
    [] returns object of the same class as original, can select > 1 element
    [[]] extracts elements of a list or data frame, only extract a single element
    $ extracts elements of a list or data frame by name, similar to [[]]
    Ex.s
      x <- c("a", "b", "c", "c", "d", "a")
      x[1] = [1] "a"
      x[1:4] = [1] "a" "b" "c" "c"
      x[x > "a"] = [1] "b" "c" "c" "d"
      u <- x > "a" = [1] F T T T F
      x[u] = [1] "b" "c" "c" "d"

  Lists
    x <- list(foo = 1:4, bar = 0.6)
    x[1] = $foo /n [1] 1 2 3 4
    x[[1]] = [1] 1 2 3 4
    x$bar = [1] 0.6
    x[["bar"]] = [1] 0.6
    x["bar"] = $bar /n [1] 0.6

    x <- list(foo = 1:4, bar = 0.6, baz ="hello")
    x[c(1, 3)]
      $foo
      [1] 1 2 3 4
      $baz
      [1] "hello"

    name <- "foo"
    x[[name]] #computed index for 'foo'
      [1] 1 2 3 4
    x$name #element 'name' doesn't exist
      NULL
    x$foo
      [1] 1 2 3 4 #element 'foo' does exist

    x <- list(a = list(10, 12, 14), b = c(3.14, 2.81))
    x[[c(1, 3)]]
      [1] 14
    x[[1]][[3]]
      [1] 14
    x[[c(2, 1)]]
      [1] 3.14

  Matrices
    x <- matrix(1:6, 2, 3)
    x[1, 2]
      [1] 3
    x[2, 1]
      [1] 2
    x[1, ]
      [1] 1 3 5
    x[, 2]
      [1] 3 4
    x[1, 2, drop = FALSE] #1x1 matrix as opposed to 1D element
          [,1]
      [1,] 3
    x[1, , drop = FALSE] #matrix instead of vector
          [,1] [,2] [,3]
      [1,]  1    3    5

  Partial Matching
    x <- list(aardvark = 1:5)
    x$a
      [1] 1 2 3 4 5
    x[["a"]]
      NULL
    x[["a", exact = FALSE]]
      [1] 1 2 3 4 5

  Removing NA values
    x <- c(1, 2, NA, 4, NA, 5)
    bad <- is.na(x)
    x[!bad]
      [1] 1 2 4 5
    x <- c(1, 2, NA, 4, NA, 5)
    y <- c("a", "b", NA, "d", NA, "f")
    good <- complete.cases(x, y)
    good
      [1] T T F T F T
    x[good]
      [1] 1 2 4 5
    y[good]
      [1] "a" "b" "d" "f"

    airquality[1:6, ]
    good <- complete.cases(airquality)
    airquality[good, ][1:6, ]

  Vectorized Operations
    x <- 1:4; y <- 6:9
    x + y
    x > 2
    x >=2
    y == 8
    x * y
    x / y

    x <- matrix(1:4, 2 2); y <- matrix(rep(10, 4), 2 2)
    x * y #Element-wise multiplication
    x / y
    x %*% y #True matrix multiplication
